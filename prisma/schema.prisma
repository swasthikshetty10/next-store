generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  telephone     Int?
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean         @default(false)
  accounts      Account[]
  Address       Address[]
  OrederDetails OrederDetails[]
  sessions      Session[]
}

model Address {
  id          Int     @id @default(autoincrement())
  addresLine1 String
  addresLine2 String?
  city        String
  postalCode  Int
  country     String
  telephone   Int
  mobile      Int
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  SKU              String?
  price            Decimal?
  categoryId       Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  discountId       Int?
  images           String[]
  productCategory  ProductCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  discount         Discount?          @relation(fields: [discountId], references: [id], onDelete: Cascade)
  OrederItems      OrederItems[]
  ProductInventory ProductInventory[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Products    Product[]
}

model ProductInventory {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Discount {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String
  discountPercentage Decimal
  active             Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  Product            Product[]
}

model OrederDetails {
  id        Int      @id @default(autoincrement())
  userId    String
  total     Decimal
  paymentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrederItems {
  id        String   @id @default(cuid())
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String          @id @default(cuid())
  orderId       String
  status        String
  amount        Decimal
  provider      String
  paymentData   Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OrederDetails OrederDetails[]
}
