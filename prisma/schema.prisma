// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  telephone     Int
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  Address       Address[]
  Product       Product[]
}

model Address {
  id          Int     @id @default(autoincrement())
  addresLine1 String
  addresLine2 String?
  city        String
  postalCode  Int
  country     String
  telephone   Int
  mobile      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

// Product Schema

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  SKU             String
  price           Decimal
  image           String?
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  image       String?
  Product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductInventory {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
